"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const node_fetch_1 = require("node-fetch");
const sensitiveInformation_json_1 = require("../sensitiveInformation.json");
const environment_1 = require("../environements/environment");
let userAgent;
if (environment_1.Environment.platform === 'node') {
    userAgent = require('nodejs-user-agent');
}
class ApiClient {
    createTelemetry(rawTelemeters) {
        return __awaiter(this, void 0, void 0, function* () {
            const timeDifference = yield this.getTimeDifference();
            const telemeters = (Array.isArray(rawTelemeters) ? rawTelemeters : [rawTelemeters])
                .map((telemetry) => (Object.assign(Object.assign({}, telemetry), { telemetryClientVersion: sensitiveInformation_json_1.version, telemetryClientVersionHash: sensitiveInformation_json_1.hash, timeDifference: timeDifference || null })));
            const { libVersion } = telemeters[0];
            return this.sendRequest({
                url: '/telemetry',
                method: 'post',
                body: telemeters,
            }, libVersion);
        });
    }
    getTime() {
        return __awaiter(this, void 0, void 0, function* () {
            const { datetime } = yield this.sendRequest({
                url: '/time',
                method: 'get',
            });
            return new Date(datetime);
        });
    }
    sendRequest(request, libVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${sensitiveInformation_json_1.endpoint}${request.url}`;
            const headers = {};
            if (environment_1.Environment.platform === 'node') {
                headers['User-Agent'] = userAgent === null || userAgent === void 0 ? void 0 : userAgent.ua('jira.js', libVersion);
            }
            const response = yield node_fetch_1.default(url, {
                method: request.method,
                headers,
                compress: true,
                follow: 0,
                body: request.body ? JSON.stringify(request.body) : undefined,
            });
            return response.json();
        });
    }
    getTimeDifference() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.timeDifference) {
                return this.timeDifference;
            }
            const serverTime = yield this.getTime();
            const localTime = new Date();
            this.timeDifference = serverTime
                ? Math.floor((serverTime.getTime() - localTime.getTime()) / 1000)
                : undefined;
            return this.timeDifference;
        });
    }
}
exports.ApiClient = ApiClient;
