"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const axios_1 = require("axios");
const telemetry_jira_js_1 = require("telemetry.jira.js");
const authenticationService_1 = require("../services/authenticationService");
const STRICT_GDPR_FLAG = 'x-atlassian-force-account-id';
const ATLASSIAN_TOKEN_CHECK_FLAG = 'X-Atlassian-Token';
const ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE = 'no-check';
class BaseClient {
    constructor(config) {
        var _a;
        this.config = config;
        this.telemetryClient = new telemetry_jira_js_1.TelemetryClient(config.telemetry);
        this.instance = axios_1.default.create(Object.assign(Object.assign({ paramsSerializer: this.paramSerializer.bind(this) }, config.baseRequestConfig), { baseURL: config.host, headers: this.removeUndefinedProperties(Object.assign({ [STRICT_GDPR_FLAG]: config.strictGDPR, [ATLASSIAN_TOKEN_CHECK_FLAG]: config.noCheckAtlassianToken ? ATLASSIAN_TOKEN_CHECK_NOCHECK_VALUE : undefined }, (_a = config.baseRequestConfig) === null || _a === void 0 ? void 0 : _a.headers)) }));
    }
    paramSerializer(parameters) {
        const parts = [];
        Object.entries(parameters).forEach(([key, value]) => {
            if (value === null || typeof value === 'undefined') {
                return undefined;
            }
            if (Array.isArray(value)) {
                // eslint-disable-next-line no-param-reassign
                value = value.join(',');
            }
            if (value instanceof Date) {
                // eslint-disable-next-line no-param-reassign
                value = value.toISOString();
            }
            else if (value !== null && typeof value === 'object') {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
            }
            parts.push(`${this.encode(key)}=${this.encode(value)}`);
            return undefined;
        });
        return parts.join('&');
    }
    encode(value) {
        return encodeURIComponent(value)
            .replace(/%3A/gi, ':')
            .replace(/%24/g, '$')
            .replace(/%2C/gi, ',')
            .replace(/%20/g, '+')
            .replace(/%5B/gi, '[')
            .replace(/%5D/gi, ']');
    }
    removeUndefinedProperties(obj) {
        return Object.entries(obj)
            .filter(([, value]) => typeof value !== 'undefined')
            .reduce((accumulator, [key, value]) => (Object.assign(Object.assign({}, accumulator), { [key]: value })), {});
    }
    sendRequest(requestConfig, callback, telemetryData) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            const startDateTime = new Date();
            const telemetry = Object.assign({ authentication: this.authenticationType, baseRequestConfigUsed: !!this.config.baseRequestConfig, bodyExists: !!requestConfig.data, callbackUsed: !!callback, headersExists: !!requestConfig.headers, libVersion: '2.3.0', libVersionHash: 'ae14c21d807ec17e583ca3b6c2097de5', methodName: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.methodName) || 'sendRequest', onErrorMiddlewareUsed: !!((_a = this.config.middlewares) === null || _a === void 0 ? void 0 : _a.onError), onResponseMiddlewareUsed: !!((_b = this.config.middlewares) === null || _b === void 0 ? void 0 : _b.onResponse), queryExists: !!requestConfig.params, requestEndTime: new Date(), requestStartTime: startDateTime, requestStatusCode: 0, strict_GDPR_enabled: !!this.config.strictGDPR, noCheckAtlassianToken: !!this.config.noCheckAtlassianToken }, telemetryData);
            try {
                const modifiedRequestConfig = Object.assign(Object.assign({}, requestConfig), { headers: this.removeUndefinedProperties(Object.assign({ Authorization: yield authenticationService_1.AuthenticationService.getAuthenticationToken(this.config.authentication, {
                            baseURL: this.config.host,
                            url: this.instance.getUri(requestConfig),
                            method: requestConfig.method,
                        }) }, requestConfig.headers)) });
                const response = yield this.instance.request(modifiedRequestConfig);
                const callbackResponseHandler = callback && ((data) => callback(null, data));
                const defaultResponseHandler = (data) => data;
                const responseHandler = callbackResponseHandler !== null && callbackResponseHandler !== void 0 ? callbackResponseHandler : defaultResponseHandler;
                (_d = (_c = this.config.middlewares) === null || _c === void 0 ? void 0 : _c.onResponse) === null || _d === void 0 ? void 0 : _d.call(_c, response.data);
                telemetry.requestStatusCode = response.status;
                return responseHandler(response.data);
            }
            catch (e) {
                const callbackErrorHandler = callback && ((error) => callback(error));
                const defaultErrorHandler = (error) => {
                    throw error;
                };
                const errorHandler = callbackErrorHandler !== null && callbackErrorHandler !== void 0 ? callbackErrorHandler : defaultErrorHandler;
                (_f = (_e = this.config.middlewares) === null || _e === void 0 ? void 0 : _e.onError) === null || _f === void 0 ? void 0 : _f.call(_e, e);
                telemetry.requestStatusCode = e.isAxiosError ? (_h = (_g = e.response) === null || _g === void 0 ? void 0 : _g.status) !== null && _h !== void 0 ? _h : 0 : 418;
                return errorHandler(e);
            }
            finally {
                telemetry.requestEndTime = new Date();
                this.telemetryClient.sendTelemetry(telemetry);
            }
        });
    }
    get authenticationType() {
        const { authentication } = this.config;
        if (!authentication) {
            return telemetry_jira_js_1.Authentication.None;
        }
        if (authentication.basic) {
            return telemetry_jira_js_1.Authentication.Basic;
        }
        if (authentication.oauth) {
            return telemetry_jira_js_1.Authentication.OAuth;
        }
        if (authentication.oauth2) {
            return telemetry_jira_js_1.Authentication.OAuth2;
        }
        if (authentication.jwt) {
            return telemetry_jira_js_1.Authentication.JWT;
        }
        return telemetry_jira_js_1.Authentication.NA;
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=baseClient.js.map